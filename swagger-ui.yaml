swagger: "2.0"
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com
  description: This the API for the CPEL application
  version: 1.0.0
  title: API for CPEL Application

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: professor
    description: Professors operations
  - name: student
    description: Student operations
  - name: group
    description: Group of students

paths:
  /inventory:
    get:
      tags:
        - developers
      summary: searches inventory
      operationId: searchInventory
  /professor:
    get:
      tags:
        - professor
      summary: searches professors
      operationId: searchProfessors
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
        - application/json
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/InventoryItem'
      responses:
        200:
          description: Search all existing professors
          schema:
            type: array
            items:
              $ref: '#/definitions/Professor'
        400:
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: inventoryItem
          description: Inventory item to add
          schema:
            $ref: '#/definitions/InventoryItem'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
definitions:
  InventoryItem:
    type: object
    required:
      - id
      - name
      - manufacturer
      - releaseDate
  /professor/{id}:
    get:
      tags:
        - professor
      summary: searches professors
      operationId: searchProfessors
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
        - application/json
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/InventoryItem'
        400:
          description: bad input parameter
definitions:
  Professor:
    type: object
    required:
      - idProf
      - lastname
      - firstname
      - email
      - password
      - idModule
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Widget Adapter
      releaseDate:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      lastname:
        type: string
        example: Doe
      firtname:
        type: string
        example: Joe
      email:
        type: string
        example: joe.doe@domain.com
      password:
        type: string
        example: hashPassword
      idModule:
        type: integer
        format: int32
        example: 2
      manufacturer:
        $ref: '#/definitions/Manufacturer'
  Manufacturer:
    required:
      - name
    properties:
      name:
        type: string
        example: ACME Corporation
      homePage:
        type: string
        format: url
        example:  https://www.acme-corp.com
      phone:
        type: string
        example: 408-867-5309
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /CPEL_Project/CPEL_PROJECT/1.0.0
schemes:
  - https
